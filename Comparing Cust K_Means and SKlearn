import matplotlib.pyplot as plt
from matplotlib import style
import numpy as np
from sklearn import preprocessing, model_selection
import pandas as pd

##X = np.array([[1, 2],
##              [1.5, 1.8],
##              [5, 8],
##              [8, 8],
##              [1, 0.6],
##              [9, 11]])
##
##colors = ['r','g','b','c','k','o','y']

class K_Means:

    def __init__(self, k=2, tol=0.001, max_iter=300):
        self.k = k
        self.tol = tol
        self.max_iter = max_iter

    def fit(self, data):
        # pick starting centeroids
        self.centroids = np.array([data[i] for i in range(self.k)])

        self.centroids = {}
        prev_centroids = {}

        for i in range(self.k):
            self.centroids[i] = data[i]
            prev_centroids[i] = data[i]

        # if true
        for i in range(self.max_iter):
            self.classifications = {}

            for i in range(self.k):
                self.classifications = {}

                for i in range(self.k):
                    self.classification[i] = []
                # cycle through known data, and assign to class it as closest to
                for featureset in X:
                    # compare distance to either centroid
                    distances = [np.linalg.norm(featureset-self.centroids[centroid]) for centroid in self.centroids]
                    #print(distacnes)
                    classification = (distacnes.index(min(distances)))
                    self.classifications[classification].append(featureset)
                    #prev_centroids[classification] = self.cetnroids[centroid]

                prev_centroids = dict(self.centroids)

                for classification in self.classifications:
                    # on first run, do not do this.... then add
                    self.cetnroids[classification] = np.array(self.classifications[classification],axis=0)

                optimized = True

                for c in self.centroids:
                    original_centroid = prev_centroids[c]
                    current_centroid = self.centroids[c]
                    if np.sum((current_centroid-original_centroid)/original_centroid*100.00):
                    #print(np.sum((current_centroid-original_centroid)/original_centroid*100.00))
                        optimized = False

                if optimized:
                    break

    def predict(self,data):
        #compare distacne to either centroid
        distances = [np.linalg.norm(data-self.centroids[centroid]) for centroid in self.centroids]
        #print(distacnes)
        classification = (distances.index(min(distances)))
        return classification

df = pd.read_excel('titanic.xls')
df.drop(['body', 'name'], 1, inplace=True)
# Convert_objects has been depreciated by pandas, workaround in research. 
#df.convert_objects(convert_numeric=True)
print(df.head())
df.fillna(0,inplace=True)

def handle_non_numeric_data(df):

    # handling non-numeric data: must convert.
    columns = df.columns.values

    for column in columns:
        text_digit_vals = {}
        def convert_to_int(val):
            return text_digit_vals[val]

        #print(column,df[column].dtype)
        if df[column].dtype != np.int64 and df[column].dtype != np.float64:

            column_contents = df[column].values.tolist()
            #finding just the uniques
            unique_elements = set(column_contents)
            # Got it
            x = 0
            for unique in unique_elements:
                if unique not in text_digit_vals:
                    #creating dict that contains new id per unique string
                    text_digit_vals[unique] = x
                    x+=1
            # now, replcae the new "id" value to replace the string
            df[column] = list(map(convert_to_int,df[column]))

        return df

df = handle_non_numeric_data(df)
print(df.head())

#add/remove features just to see impact they have
df.drop(['ticket','home.dest'], 1, inplace=True)

X = np.array(df.drop(['survived'], 1).astype(float))
X = preprocessing.scale(X)
y = np.array(df['survived'])

#X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.5)

clf = K_Means()
clf.fit(X)

correct = 0
for i in range(len(X)):

    predict_me = np.array(X[i].astype(float))
    predict_me = predict_me.reshape(-1, len(predict_me))
    prediction = clf.predict(predict_me)
    if prediction == y_test[i]:
        correct += 1

print(correct/len(X))
